{
  "version": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "title": "A_Basic_Test_Squmpfile",
  "requests": [
    {
      "title": "A",
      "script": [
        "local s = require('sqump')",
        "",
        "local resp = s.fetch('http://localhost:5310/getAuth', {",
        "\ttimeout = 5",
        "})",
        "",
        "assert(resp.status == 200, \"req A status\")",
        "",
        "s.export({",
        "\tstatus = resp.status,",
        "\theaders = resp.headers,",
        "\tbody = resp.body",
        "})"
      ]
    },
    {
      "title": "B",
      "script": [
        "local s = require('sqump')",
        "",
        "local a = s.execute('A')",
        "",
        "local resp = s.fetch('http://localhost:5310/createThing', {",
        "\tmethod = 'POST',",
        "\ttimeout = 5,",
        "\theaders = {",
        "\t\tAuthorization = 'Basic ' .. a.body,",
        "\t},",
        "\tbody = '{\"payload\": \"print this test message\"}'",
        "})",
        "",
        "assert(resp.status == 200, \"req B status\")",
        "",
        "s.print_response(resp)"
      ]
    },
    {
      "title": "C",
      "script": [
        "local s = require('sqump')",
        "",
        "local json = [[",
        "{",
        "\t\"one\": \"one\",",
        "\t\"two\": 2,",
        "\t\"three\": true,",
        "\t\"four\": null,",
        "\t\"five\": [1, 7, 3, 4, 5],",
        "\t\"six\": {",
        "\t\t\"some\": 1,",
        "\t\t\"other\": \"values\"",
        "\t}",
        "}",
        "]]",
        "",
        "local val = s.drill_json('one', json)",
        "assert(val == 'one', 'assert one')",
        "",
        "val = s.drill_json('two', json)",
        "assert(val == 2, 'assert two')",
        "",
        "val = s.drill_json('three', json)",
        "assert(val == true, 'assert three')",
        "",
        "val = s.drill_json('four', json)",
        "assert(val == nil, 'assert four')",
        "",
        "val = s.drill_json('five', json)",
        "assert('[1,7,3,4,5]', 'assert five')",
        "",
        "val = s.drill_json('six', json)",
        "assert('{\"some\":1,\"other\":\"values\"}', 'assert six')",
        "",
        "val = s.drill_json('five.2', json)",
        "assert(val == 7, 'assert seven')",
        "",
        "val = s.drill_json('six.other', json)",
        "assert(val == 'values', 'assert eight')"
      ]
    }
  ],
  "environment": {
    "staging": {}
  }
}
