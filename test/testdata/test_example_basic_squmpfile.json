{
  "version": {
    "major": 0,
    "minor": 1,
    "patch": 0
  },
  "title": "A_Basic_Test_Squmpfile",
  "requests": [
    {
      "title": "A",
      "script": [
        "local s = require('sqump')",
        "",
        "local resp = s.fetch('http://localhost:5309/getAuth', {",
        "\ttimeout = 5",
        "})",
        "",
        "assert(resp.status == 200, \"req A status\")",
        "",
        "s.export({",
        "\tstatus = resp.status,",
        "\theaders = resp.headers,",
        "\tbody = resp.body",
        "})"
      ]
    },
    {
      "title": "B",
      "script": [
        "local s = require('sqump')",
        "",
        "local a = s.execute('A')",
        "",
        "local resp = s.fetch('http://localhost:5309/createThing', {",
        "\tmethod = 'POST',",
        "\ttimeout = 5,",
        "\theaders = {",
        "\t\tAuthorization = 'Basic ' .. a.body,",
        "\t},",
        "\tbody = '{\"payload\": \"print this test message\"}'",
        "})",
        "",
        "assert(resp.status == 200, \"req B status\")",
        "",
        "s.print_response(resp)"
      ]
    },
    {
      "title": "C",
      "script": [
        "local function table_eq(table1, table2)",
        "\tlocal avoid_loops = {}",
        "\tlocal function recurse(t1, t2)",
        "\t\t-- compare value types",
        "\t\tif type(t1) ~= type(t2) then return false end",
        "\t\t-- Base case: compare simple values",
        "\t\tif type(t1) ~= \"table\" then return t1 == t2 end",
        "\t\t-- Now, on to tables.",
        "\t\t-- First, let's avoid looping forever.",
        "\t\tif avoid_loops[t1] then return avoid_loops[t1] == t2 end",
        "\t\tavoid_loops[t1] = t2",
        "\t\t-- Copy keys from t2",
        "\t\tlocal t2keys = {}",
        "\t\tlocal t2tablekeys = {}",
        "\t\tfor k, _ in pairs(t2) do",
        "\t\t\tif type(k) == \"table\" then table.insert(t2tablekeys, k) end",
        "\t\t\tt2keys[k] = true",
        "\t\tend",
        "\t\t-- Let's iterate keys from t1",
        "\t\tfor k1, v1 in pairs(t1) do",
        "\t\t\tlocal v2 = t2[k1]",
        "\t\t\tif type(k1) == \"table\" then",
        "\t\t\t\t-- if key is a table, we need to find an equivalent one.",
        "\t\t\t\tlocal ok = false",
        "\t\t\t\tfor i, tk in ipairs(t2tablekeys) do",
        "\t\t\t\t\tif table_eq(k1, tk) and recurse(v1, t2[tk]) then",
        "\t\t\t\t\t\ttable.remove(t2tablekeys, i)",
        "\t\t\t\t\t\tt2keys[tk] = nil",
        "\t\t\t\t\t\tok = true",
        "\t\t\t\t\t\tbreak",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tif not ok then return false end",
        "\t\t\telse",
        "\t\t\t\t-- t1 has a key which t2 doesn't have, fail.",
        "\t\t\t\tif v2 == nil then return false end",
        "\t\t\t\tt2keys[k1] = nil",
        "\t\t\t\tif not recurse(v1, v2) then return false end",
        "\t\t\tend",
        "\t\tend",
        "\t\t-- if t2 has a key which t1 doesn't have, fail.",
        "\t\tif next(t2keys) then return false end",
        "\t\treturn true",
        "\tend",
        "\treturn recurse(table1, table2)",
        "end",
        "",
        "local s = require('sqump')",
        "",
        "local json = [[",
        "{",
        "\t\"one\": \"one\",",
        "\t\"two\": 2,",
        "\t\"three\": true,",
        "\t\"four\": null,",
        "\t\"five\": [1, 7, 3, 4, 5],",
        "\t\"six\": {",
        "\t\t\"some\": 1,",
        "\t\t\"other\": \"values\"",
        "\t}",
        "}",
        "]]",
        "",
        "local val = s.drill_json('one', json)",
        "print('val:', val)",
        "assert(val == 'one', 'assert one')",
        "",
        "val = s.drill_json('two', json)",
        "print('val:', val)",
        "assert(val == 2, 'assert two')",
        "",
        "val = s.drill_json('three', json)",
        "print('val:', val)",
        "assert(val == true, 'assert three')",
        "",
        "val = s.drill_json('four', json)",
        "print('val:', val)",
        "assert(val == nil, 'assert four')",
        "",
        "val = s.drill_json('five', json)",
        "print('val:', val)",
        "assert(table_eq(val, { 1, 7, 3, 4, 5 }), 'assert five')",
        "",
        "val = s.drill_json('six', json)",
        "print('val:', val)",
        "assert(table_eq(val, {",
        "\tsome = 1,",
        "\tother = \"values\"",
        "}), 'assert six')",
        "",
        "val = s.drill_json('five.2', json)",
        "print('val:', val)",
        "assert(val == 7, 'assert seven')",
        "",
        "val = s.drill_json('six.other', json)",
        "print('val:', val)",
        "assert(val == 'values', 'assert eight')"
      ]
    }
  ],
  "environment": {
    "staging": {}
  }
}